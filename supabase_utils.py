from supabase import create_client, Client
import sqlite3
import os

# ==========================
# üîπ CONFIGURA√á√ïES DO SUPABASE
# ==========================
SUPABASE_URL = "https://zqvbgfqzdcejgxthdmht.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpxdmJnZnF6ZGNlamd4dGhkbWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMTI5ODAsImV4cCI6MjA3MDY4ODk4MH0.e4NhuarlGNnXrXUWKdLmGoa1DGejn2jmgpbRR_Ztyqw"

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Nome do banco local
LOCAL_DB = "clientes.db"
LOCAL_TABLE = "clientes"
REMOTE_TABLE = "Clientes"


# ==========================
# üîπ INSER√á√ÉO LOCAL COM VALIDA√á√ÉO
# ==========================
def inserir_cliente(nome, cpf, endereco, cidade, telefone, indicacao):
    """Insere cliente no banco local validando campos e CPF duplicado."""
    try:
        if not all([nome.strip(), cpf.strip(), endereco.strip(), cidade.strip(), telefone.strip(), indicacao.strip()]):
            return "‚ö† Todos os campos s√£o obrigat√≥rios."

        conn = sqlite3.connect(LOCAL_DB)
        cur = conn.cursor()

        # Verifica duplicidade de CPF
        cur.execute(f"SELECT COUNT(*) FROM {LOCAL_TABLE} WHERE CPF = ?", (cpf.strip(),))
        existe = cur.fetchone()[0]
        if existe > 0:
            conn.close()
            return "‚ö† Este CPF j√° est√° cadastrado!"

        # Insere novo cliente
        cur.execute(f"""
            INSERT INTO {LOCAL_TABLE} (Nome, CPF, Endere√ßo, Cidade, Telefone, Indica√ß√£o)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (nome.strip(), cpf.strip(), endereco.strip(), cidade.strip(), telefone.strip(), indicacao.strip()))
        conn.commit()
        conn.close()
        return "‚úÖ Cliente inserido com sucesso!"

    except Exception as e:
        return f"‚ö† Erro ao inserir cliente: {e}"


# ==========================
# üîπ BAIXAR DO SUPABASE
# ==========================
def baixar_do_supabase():
    """Baixa todos os clientes do Supabase e substitui o banco local."""
    try:
        print("‚òÅÔ∏è Baixando dados do Supabase...")
        response = supabase.table(REMOTE_TABLE).select("*").execute()
        data = response.data if hasattr(response, "data") else []

        if not data:
            print("‚ö† Nenhum dado encontrado no Supabase.")
            return False

        print(f"‚úÖ {len(data)} registros encontrados no Supabase.")

        conn = sqlite3.connect(LOCAL_DB)
        cur = conn.cursor()

        cur.execute(f"""
        CREATE TABLE IF NOT EXISTS {LOCAL_TABLE} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            Nome TEXT NOT NULL,
            CPF TEXT NOT NULL UNIQUE,
            Endere√ßo TEXT NOT NULL,
            Cidade TEXT NOT NULL,
            Telefone TEXT NOT NULL,
            Indica√ß√£o TEXT NOT NULL
        )
        """)
        conn.commit()

        # Substitui completamente o banco local
        cur.execute(f"DELETE FROM {LOCAL_TABLE}")
        for c in data:
            cur.execute(f"""
                INSERT INTO {LOCAL_TABLE} (Nome, CPF, Endere√ßo, Cidade, Telefone, Indica√ß√£o)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                c.get("Nome", "").strip(),
                c.get("CPF", "").strip(),
                c.get("Endere√ßo", "").strip(),
                c.get("Cidade", "").strip(),
                c.get("Telefone", "").strip(),
                c.get("Indica√ß√£o", "").strip()
            ))

        conn.commit()
        conn.close()

        print("üíæ Banco local atualizado com sucesso!")
        return True

    except Exception as e:
        print(f"‚ö† Erro ao baixar do Supabase: {e}")
        return False


# ==========================
# üîπ SALVAR NO SUPABASE
# ==========================
def salvar_no_supabase():
    """Envia todos os clientes do banco local para o Supabase."""
    try:
        if not os.path.exists(LOCAL_DB):
            print("‚ö† Banco de dados local n√£o encontrado.")
            return False

        conn = sqlite3.connect(LOCAL_DB)
        cur = conn.cursor()
        cur.execute(f"SELECT Nome, CPF, Endere√ßo, Cidade, Telefone, Indica√ß√£o FROM {LOCAL_TABLE}")
        dados = cur.fetchall()
        conn.close()

        if not dados:
            print("‚ö† Nenhum dado para enviar ao Supabase.")
            return False

        # üîé Monta registros √∫nicos por CPF (evita erro de conflito duplo)
        registros_unicos = {}
        for d in dados:
            if not all(d):  # ignora campos vazios
                continue
            cpf = d[1].strip()
            registros_unicos[cpf] = {
                "Nome": d[0].strip(),
                "CPF": cpf,
                "Endere√ßo": d[2].strip(),
                "Cidade": d[3].strip(),
                "Telefone": d[4].strip(),
                "Indica√ß√£o": d[5].strip()
            }

        registros = list(registros_unicos.values())
        if not registros:
            print("‚ö† Nenhum registro v√°lido para enviar.")
            return False

        # üîÑ UPSERT por CPF
        response = supabase.table(REMOTE_TABLE).upsert(
            registros,
            on_conflict=["CPF"]
        ).execute()

        enviados = len(response.data) if response.data else len(registros)
        print(f"‚úÖ {enviados} registros enviados/atualizados no Supabase!")
        return True

    except Exception as e:
        print(f"‚ö† Erro ao salvar no Supabase: {e}")
        return False
